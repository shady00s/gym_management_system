import '../teams/players_teams.drift';
import 'players_data.drift';

CREATE TABLE IF NOT EXISTS Players (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    player_index_id INT NOT NULL,
    player_id INT NOT NULL,
    player_name TEXT NOT NULL,
    player_phone_number INT NOT NULL,
    image_path TEXT NOT NULL,
    player_age INT NOT NULL,
    player_first_join_date DATETIME NOT NULL,
    player_gender TEXT NOT NULL,
    subscription_id  INT NOT NULL
);
CREATE INDEX player_index_id_idx on Players(player_index_id);

CREATE TABLE IF NOT EXISTS PlayersSubscriptions(
    sub_id INT PRIMARY KEY AUTOINCREMENT,
    team_id INT NOT NULL,
    subscription_pay_date  DATETIME NOT NULL,
    player_subscription_id INT NOT NULL,
    beginning_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    billId INT NOT NULL,
    billValue INT NOT NULL,
    duration INT NOT NULL,
    billCollector TEXT NOT NULL
);

allPlayers: SELECT * FROM Players;
getAllNames: SELECT player_id, player_index_id, player_name FROM Players ORDER BY player_id ASC;
allSubscriptions: SELECT * FROM PlayersSubscriptions;

getPlayerSubscription: SELECT DISTINCT Players.*, PlayersSubscriptions.*  FROM Players
                        INNER JOIN PlayersSubscriptions ON  PlayersSubscriptions.player_subscription_id = :player_index_id
                        INNER JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = :player_index_id
                        WHERE Players.player_index_id = :player_index_id  ORDER BY end_date DESC;

getPlayerTeam (REQUIRED :player_index_id): SELECT DISTINCT TeamsDataTable.* FROM Players
               INNER JOIN PlayersSubscriptions ON  PlayersSubscriptions.player_subscription_id = :player_index_id
               INNER JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = :player_index_id
               INNER JOIN TeamsDataTable ON TeamsDataTable.team_id = PlayersAndTeamsTable.team_id
               WHERE Players.player_index_id = :player_index_id;

getPlayersByTeam (REQUIRED :firstDate AS DATETIME, REQUIRED :secDate AS DATETIME): SELECT DISTINCT player_id, player_index_id, player_name FROM Players
                    INNER JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = Players.player_index_id
                    INNER JOIN PlayersSubscriptions ON PlayersSubscriptions.player_subscription_id = Players.player_index_id
                    WHERE PlayersAndTeamsTable.team_id = :team_id
                    ORDER BY Players.player_first_join_date DESC;

getEndedSubscriptionByTeam (REQUIRED :beginDateTime AS DATETIME, REQUIRED :secondDateTime AS DATETIME,REQUIRED :team_id AS INT ):
                           SELECT  Players.*, PlayersSubscriptions.* FROM Players
                           LEFT JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = Players.player_index_id
                           INNER JOIN (
                                     SELECT  PlayersSubscriptions.player_subscription_id, MAX(PlayersSubscriptions.beginning_date), MAX(PlayersSubscriptions.end_date) AS latest_end_date
                                     FROM PlayersSubscriptions
                                     WHERE end_date BETWEEN :beginDateTime AND :secondDateTime AND  PlayersSubscriptions.beginning_date < :secondDateTime
                                     AND PlayersSubscriptions.duration != 11
                                     GROUP BY player_subscription_id
                                 ) AS LatestSubscriptions ON Players.player_index_id = LatestSubscriptions.player_subscription_id
                           LEFT JOIN PlayersSubscriptions ON PlayersSubscriptions.player_subscription_id = Players.player_index_id
                           WHERE PlayersAndTeamsTable.team_id = :team_id
                           AND PlayersSubscriptions.team_id = :team_id
                           AND PlayersSubscriptions.end_date = LatestSubscriptions.latest_end_date AND PlayersSubscriptions.beginning_date < :secondDateTime
                           ORDER BY PlayersSubscriptions.end_date DESC;

filterNewPlayers(REQUIRED :beginDate AS DATETIME OR NUll,REQUIRED :endDate AS DATETIME OR NUll,REQUIRED :teamId AS INT OR NULL,REQUIRED :billVal AS INT OR NULL): SELECT  DISTINCT Players.* FROM PLAYERS
                  INNER JOIN PlayersSubscriptions ON Players.player_index_id = PlayersSubscriptions.player_subscription_id
                  INNER JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = Players.player_index_id
                  WHERE Players.player_first_join_date BETWEEN :beginDate  AND :endDate
                  AND (PlayersSubscriptions.billValue = COALESCE(:billVal, PlayersSubscriptions.billValue) OR :billVal IS NULL)
                  AND (PlayersAndTeamsTable.team_id = COALESCE(:teamId, PlayersAndTeamsTable.team_id) OR :teamId IS NULL )
                  ORDER BY PLAYERS.player_first_join_date DESC;

filterEndedSubPlayers(REQUIRED :beginDate AS DATETIME OR NUll,REQUIRED :endDate AS DATETIME OR NUll,REQUIRED :teamId AS INT OR NULL,REQUIRED :billVal AS INT OR NULL): SELECT  DISTINCT Players.* FROM PLAYERS
                  INNER JOIN PlayersSubscriptions ON Players.player_index_id = PlayersSubscriptions.player_subscription_id
                  INNER JOIN PlayersAndTeamsTable ON PlayersAndTeamsTable.team_player_id = Players.player_index_id
                  WHERE PlayersSubscriptions.end_date BETWEEN :beginDate  AND :endDate
                  AND (PlayersSubscriptions.billValue = COALESCE(:billVal, PlayersSubscriptions.billValue) OR :billVal IS NULL)
                  AND (PlayersAndTeamsTable.team_id = COALESCE(:teamId, PlayersAndTeamsTable.team_id) OR :teamId IS NULL )
                  ORDER BY PLAYERS.player_first_join_date DESC;

enterPlayerToGym(REQUIRED :teamId AS INT,REQUIRED :playerId AS INT, :playerName AS TEXT):
                                            SELECT DISTINCT  Players.player_id, Players.player_index_id, Players.player_name, PlayersSubscriptions.player_subscription_id,PlayersSubscriptions.end_date, MAX(PlayersSubscriptions.end_date), PlayersAndTeamsTable.team_player_id, PlayersAndTeamsTable.team_id
                                                FROM Players
                                            LEFT JOIN PlayersSubscriptions ON Players.player_index_id = PlayersSubscriptions.player_subscription_id
                                            LEFT JOIN PlayersAndTeamsTable ON Players.player_index_id = PlayersAndTeamsTable.team_player_id
                                            WHERE (Players.player_id = COALESCE(:playerId, Players.player_id) OR :playerId IS NULL)
                                            AND (Players.player_name = COALESCE(:playerName, Players.player_name) OR :playerName IS NULL)
                                            AND PlayersAndTeamsTable.team_id = :teamId;

